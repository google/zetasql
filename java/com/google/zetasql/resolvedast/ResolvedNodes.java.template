/*
 * Copyright 2019 ZetaSQL Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// ResolvedNodes.java GENERATED FROM ResolvedNodes.java.template
package com.google.zetasql.resolvedast;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableList.Builder;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.Message;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.zetasql.AnyResolvedNodeProto;
import com.google.zetasql.Connection;
import com.google.zetasql.ConnectionRefProto;
import com.google.zetasql.Constant;
import com.google.zetasql.ConstantRefProto;
import com.google.zetasql.FieldDescriptorRefProto;
import com.google.zetasql.FileDescriptorSetsBuilder;
import com.google.zetasql.Function;
import com.google.zetasql.OneofDescriptorRefProto;
import com.google.zetasql.ResolvedFunctionCallInfo;
import com.google.zetasql.FunctionProtos.ResolvedFunctionCallInfoProto;
import com.google.zetasql.FunctionProtos.FunctionSignatureProto;
import com.google.zetasql.FunctionProtos.TVFSignatureProto;
import com.google.zetasql.FunctionRefProto;
import com.google.zetasql.FunctionSignature;
import com.google.zetasql.ZetaSQLDescriptorPool.ZetaSQLFieldDescriptor;
import com.google.zetasql.ZetaSQLResolvedNodeKind.ResolvedNodeKind;
import com.google.zetasql.ZetaSQLStrings;
import com.google.zetasql.ZetaSQLType.ProtoTypeProto;
import com.google.zetasql.ZetaSQLType.TypeProto;
import com.google.zetasql.Model;
import com.google.zetasql.ModelRefProto;
import com.google.zetasql.Procedure;
import com.google.zetasql.ProcedureRefProto;
import com.google.zetasql.ResolvedColumnProto;
import com.google.zetasql.ResolvedNodeProto;
import com.google.zetasql.Table;
import com.google.zetasql.TableRefProto;
import com.google.zetasql.TableValuedFunction;
import com.google.zetasql.TableValuedFunctionRefProto;
import com.google.zetasql.TVFSignature;
import com.google.zetasql.Type;
import com.google.zetasql.TypeAnnotationProto.FieldFormat;
import com.google.zetasql.Value;
import com.google.zetasql.ValueWithTypeProto;
import com.google.zetasql.resolvedast.ResolvedColumn;
# for enum_class in java_enum_classes|sort
import com.google.zetasql.resolvedast.{{enum_class}};
# endfor
# for node in nodes|sort_by_name
  # if node.is_abstract
import com.google.zetasql.{{node.proto_field_type}};
  # endif
# endfor
# for node in nodes|sort_by_name
import com.google.zetasql.{{node.proto_type}};
# endfor

import java.util.List;
{{ blank_line }}
/**
 * This class is a container for all subclasses of {@link ResolvedNode}.
 *
 * HTML documentation for the class hierarchy is generated in resolved_ast.html.
 * A viewable copy is available at (broken link).
 *
 * <p> In this hierarchy, classes are either abstract or leaves.
 */
public final class ResolvedNodes {
  private ResolvedNodes() {}

  static ConstantRefProto serialize(Constant constant,
      @SuppressWarnings("unused") FileDescriptorSetsBuilder unused) {
    return
        ConstantRefProto.newBuilder().setName(constant.getFullName()).build();
  }

  static FunctionRefProto serialize(Function function,
      @SuppressWarnings("unused") FileDescriptorSetsBuilder unused) {
    return FunctionRefProto.newBuilder().setName(function.getFullName()).build();
  }

  static FunctionSignatureProto serialize(FunctionSignature functionSignature,
      FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return functionSignature.serialize(fileDescriptorSetsBuilder);
  }

  static FieldDescriptorRefProto serialize(ZetaSQLFieldDescriptor descriptor,
      FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    FieldDescriptorRefProto.Builder fieldDescriptorRef = FieldDescriptorRefProto.newBuilder();
    ProtoTypeProto.Builder proto = ProtoTypeProto.newBuilder();
    FieldDescriptor fieldDescriptor = descriptor.getDescriptor();
    proto.setProtoName(fieldDescriptor.getContainingType().getFullName());
    proto.setProtoFileName(fieldDescriptor.getFile().getName());
    proto.setFileDescriptorSetIndex(
        fileDescriptorSetsBuilder.getOrAddFileDescriptorIndex(
            fieldDescriptor.getFile(), descriptor.getZetaSQLDescriptorPool()));

    fieldDescriptorRef.setContainingProto(proto.build());
    fieldDescriptorRef.setNumber(fieldDescriptor.getNumber());

    return fieldDescriptorRef.build();
  }

  // TODO: Handle serialization of ResolvedFunctionCallInfos.
  static ResolvedFunctionCallInfoProto serialize(
      ResolvedFunctionCallInfo functionCallContext,
      FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return ResolvedFunctionCallInfoProto.getDefaultInstance();
  }

  // TODO: Handle serialization of TVFSignatures.
  static TVFSignatureProto serialize(
      TVFSignature tvfSignature, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return TVFSignatureProto.getDefaultInstance();
  }

  // TODO: Handle serialization of TVFs.
  static TableValuedFunctionRefProto serialize(
      TableValuedFunction tvf, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return TableValuedFunctionRefProto.getDefaultInstance();
  }

  static ModelRefProto serialize(Model model, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return ModelRefProto.newBuilder().setName(model.getName()).setSerializationId(model.getId()).build();
  }

  static ConnectionRefProto serialize(Connection connection, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return ConnectionRefProto.newBuilder().setName(connection.getName()).build();
  }

  static ProcedureRefProto serialize(Procedure procedure,
      @SuppressWarnings("unused") FileDescriptorSetsBuilder unused) {
    return ProcedureRefProto.newBuilder().setName(procedure.getFullName()).build();
  }

  static TableRefProto serialize(Table table, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    return TableRefProto.newBuilder().setFullName(table.getFullName()).setName(table.getName()).setSerializationId(table.getId()).build();
  }

  static TypeProto serialize(Type type, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    TypeProto.Builder builder = TypeProto.newBuilder();
    type.serialize(builder, fileDescriptorSetsBuilder);
    return builder.build();
  }

  static ValueWithTypeProto serialize(Value value, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    ValueWithTypeProto.Builder builder = ValueWithTypeProto.newBuilder();
    if (value.isValid()) {
      builder.setType(serialize(value.getType(), fileDescriptorSetsBuilder));
      builder.setValue(value.getProto());
    }
    return builder.build();
  }

  static ResolvedColumnProto serialize(ResolvedColumn col, FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    ResolvedColumnProto.Builder builder = ResolvedColumnProto.newBuilder();
    builder.setColumnId(col.getId());
    builder.setTableName(col.getTableName());
    builder.setName(col.getName());
    builder.setType(serialize(col.getType(), fileDescriptorSetsBuilder));
    return builder.build();
  }

  public static ResolvedNode deserialize(
      AnyResolvedNodeProto proto, DeserializationHelper helper) {
    switch (proto.getNodeCase()) {
# for node in root_child_nodes|sort_by_tag
      case {{node.enum_name}}_NODE:
        return {{node.name}}.deserialize(proto.get{{node.enum_name|upper_camel_case}}Node(), helper);
# endfor
      default:
        throw new IllegalArgumentException("Invalid Node kind: " + proto.getNodeCase());
    }
  }

# for node in root_child_nodes|sort_by_tag
  public static AnyResolvedNodeProto serialize(
      {{node.enum_name|upper_camel_case}} node,
      FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
    AnyResolvedNodeProto.Builder proto = AnyResolvedNodeProto.newBuilder();
    {{node.proto_field_type}}.Builder builder = {{node.proto_field_type}}.newBuilder();
    node.serialize(fileDescriptorSetsBuilder, builder);
    proto.set{{node.enum_name|upper_camel_case}}Node(builder.build());
    return proto.build();
  }
# endfor
  {{ blank_line }}
  /**
   * A visitor that ResolvedNodes accepts. The default implementation of each
   * method is to descend into the AST graph and redispatch to each child node.
   * Clients are expected to override {@code visit} methods corresponding
   * to the types they are interested in.
   */
  public static abstract class Visitor {
  {{ blank_line }}
    protected void defaultVisit(ResolvedNode node) {
      node.acceptChildren(this);
    }
  {{ blank_line }}
    // private helper method to visit a list of nodes
    private void descend(ImmutableList<? extends ResolvedNode> children) {
      children.stream().forEach((child) -> child.accept(this));
    }
  {{ blank_line }}
    // private helper method to check for null before visiting a node
    private void descend(ResolvedNode child) {
      if (child != null) {
        child.accept(this);
      }
    }
  {{ blank_line }}
  # for node in nodes
    # if not node.is_abstract
    public void visit({{node.name}} node) {
      defaultVisit(node);
    }
    {{ blank_line }}
    # endif
  # endfor
  }
{{ blank_line }}
# for node in nodes
  {{ blank_line }}
  # if node.javadoc
{{node.javadoc}}
  # endif
  # if node.is_abstract
  public static abstract class {{node.name}} extends {{node.parent}} {
  # else
  public static final class {{node.name}} extends {{node.parent}} {
  # endif
  {{ blank_line }}
  # for field in node.fields
    # if field.javadoc
{{field.javadoc}}
    # endif
    private final {{field.full_java_type}} {{field.name|lower_camel_case}};
  # endfor
    {{ blank_line }}
    {{node.name}}({{node.proto_type}} proto, DeserializationHelper helper) {
      super(proto.getParent(), helper);
  # for field in node.fields
    # if field.is_node_ptr
      if (proto.has{{field.name|upper_camel_case}}()) {
        {{field.name|lower_camel_case}} =
            {{field.java_type}}.deserialize(proto.get{{field.name|upper_camel_case}}(), helper);
      } else {
        {{field.name|lower_camel_case}} = null;
      }
    # elif field.is_node_vector
      ImmutableList.Builder<{{field.java_type}}> {{field.name|lower_camel_case}}Builder =
          ImmutableList.builder();
      for ({{field.proto_type}} element : proto.get{{field.name|upper_camel_case}}List()) {
        {{field.name|lower_camel_case}}Builder
            .add({{field.java_type}}.deserialize(element, helper));
      }
      {{field.name|lower_camel_case}} = {{field.name|lower_camel_case}}Builder.build();
    # elif field.is_vector
      # if field.has_proto_setter
      {{field.name|lower_camel_case}} =
          ImmutableList.copyOf(proto.get{{field.name|upper_camel_case}}List());
      # else
      ImmutableList.Builder<{{field.java_type}}> {{field.name|lower_camel_case}}Builder =
          ImmutableList.builder();
      for ({{field.proto_type}} element : proto.get{{field.name|upper_camel_case}}List()) {
        {{field.name|lower_camel_case}}Builder.add(helper.deserialize(element));
      }
      {{field.name|lower_camel_case}} = {{field.name|lower_camel_case}}Builder.build();
      # endif
    # else
      # if field.has_proto_setter
      {{field.name|lower_camel_case}} = proto.get{{field.name|upper_camel_case}}();
      # else
      {{field.name|lower_camel_case}} = helper.deserialize(proto.get{{field.name|upper_camel_case}}());
      # endif
    # endif
  # endfor
    }
    {{ blank_line }}
    {# Constructor that initializes fields in the superclass and in this class #}
    {% set comma = joiner(",") %}
    {{node.name}}(
      {%- for field in (node.inherited_fields + node.fields) %}{{comma()}}
        {{field.full_java_type}} {{field.name|lower_camel_case}}
      {%- endfor %}) {
      {% set comma = joiner(",") %}
      super(
        {%- for field in node.inherited_fields %}{{comma()}}
          {{field.name|lower_camel_case}}
        {%- endfor %});
      {% for field in node.fields %}
      this.{{field.member_name|lower_camel_case}} = {{field.name|lower_camel_case}};
      {% endfor %}
    }
    {{ blank_line }}
    {% if node.is_abstract %}
    @Override
    public abstract Builder toBuilder();
    {% else %}
    @Override
    public Builder toBuilder() {
      Builder builder = builder();
      {% for field in (node.inherited_fields + node.fields) %}
      builder.{{field.name|lower_camel_case}} = this.get{{field.name|upper_camel_case}}();
      {% endfor %}
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }
    {% endif %}

    {% if node.is_abstract %}
    public static abstract class Builder extends {{ node.parent }}.Builder {
    {% else %}
    public static final class Builder extends {{node.parent}}.Builder {
    {% endif %}
      {% for field in (node.fields) %}
      {% if field.is_constructor_arg %}
      {# All is_constructor_arg are required, so we default to null and check that
         they are set in validate(). #}
      protected {{field.nullable_java_type}} {{field.name|lower_camel_case}} = null;
      {% else %}
      protected {{field.full_java_type}} {{field.name|lower_camel_case}} = {{field.java_default}};
      {% endif %}
      {% endfor %}
      {{ blank_line }}
      private Builder() {}
      {{ blank_line }}
      {% for field in (node.inherited_fields) %}
      {%if field.is_vector %}
      @Override
      public Builder set{{field.name|upper_camel_case}}(List<{{field.java_type}}> v) {
        super.set{{field.name|upper_camel_case}}(v);
        return this;
      }
      {% else %}
      @Override
      public Builder set{{field.name|upper_camel_case}}({{field.full_java_type}} v) {
        super.set{{field.name|upper_camel_case}}(v);
        return this;
      }
      {% endif %}
      {{blank_line}}
      {% endfor %}
      {{blank_line}}
      {% for field in (node.fields) %}
      {%- if field.javadoc %}{{field.javadoc}}
      {%- elif field.propagate_order %}
      /**
       * Note: this method propagates the 'isOrdered' field from {@param v}.
       * To override this, call setIsOrdered explicitly after calling this
       * method.
       */
      {% endif %}
      {%if field.is_vector %}
      public Builder set{{field.name|upper_camel_case}}(List<{{field.java_type}}> v) {
        {# Copy of performs null checking of v and it's elements. #}
        this.{{field.name|lower_camel_case}} = ImmutableList.copyOf(v);
        return this;
      }
      {% else %}
      public Builder set{{field.name|upper_camel_case}}({{field.full_java_type}} v) {
        this.{{field.name|lower_camel_case}} = v;
        {% if field.full_java_type == field.nullable_java_type %}
        Preconditions.checkNotNull(v, "{{field.name|lower_camel_case}} must not be null");
        {% endif %}
        {% if field.propagate_order %}
        {# Perform the action on set, not on build, because users may wish to
           directly call setIsOrdered(). #}
        setIsOrdered(v.getIsOrdered());
        {% endif %}
        return this;
      }
      {% endif %}
      {{blank_line}}
      {% endfor %}

      {% if node.is_abstract %}
      @Override
      public abstract {{node.name}} build();
      {% else %}
      @Override
      public final {{node.name}} build() {
        validate();
        return new {{node.name}}(
        {%- set comma = joiner(",") %}
        {%- for field in node.inherited_fields + node.fields %}{{comma()}}
            {{field.name|lower_camel_case}}
        {%- endfor %});
      }
      {% endif %}

      @Override
      protected void validate() {
        super.validate();
        {% for field in (node.fields) %}
        {% if field.is_constructor_arg %}
        Preconditions.checkArgument(
            {{field.name|lower_camel_case}} != null, "{{field.name|lower_camel_case}} must be set");
        {% endif %}
        {% endfor %}
      }
    }

  # if node.is_abstract
    public static {{node.name}} deserialize(
        {{node.proto_field_type}} proto, DeserializationHelper helper) {
      switch (proto.getNodeCase()) {
    # for node in node.subclasses|sort_by_tag
        case {{node.enum_name}}_NODE:
          return {{node.name}}.deserialize(
              proto.get{{node.enum_name|upper_camel_case}}Node(), helper);
    # endfor
        default:
          throw new IllegalArgumentException("Invalid Node kind: " + proto.getNodeCase());
      }
    }
  # else
    public static final {{node.name}} deserialize(
        {{node.proto_type}} proto, DeserializationHelper helper) {
      return new {{node.name}}(proto, helper);
    }

    @Override
    public final ResolvedNodeKind nodeKind() {
      return ResolvedNodeKind.{{node.enum_name}};
    }

    @Override
    public final String nodeKindString() {
      return "{{node.node_kind_name}}";
    }
  # endif
    {{ blank_line }}
  # if node.is_abstract
    /**
     * Serializes this node into a {@link {{node.proto_type}}}.
     * Adds any new file descriptor sets it encounters to the builder.
     */
    @Override
    public Message serialize(FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
      {{node.proto_type}}.Builder builder = {{node.proto_type}}.newBuilder();
  # else
    /**
     * Serializes this node into a {@link {{node.parent_proto_container_type}}}.
     * Adds any new file descriptor sets it encounters to the builder.
     */
    @Override
    public final Message serialize(FileDescriptorSetsBuilder fileDescriptorSetsBuilder) {
      {{node.parent_proto_container_type}}.Builder builder =
          {{node.parent_proto_container_type}}.newBuilder();
  # endif
      serialize(fileDescriptorSetsBuilder, builder);
      return builder.build();
    }
    {{ blank_line }}
    /**
     * Serializes this node into the appropriate field of the provided
     * {@link {{node.parent_proto_container_type}}.Builder}.
     * Adds any new file descriptor sets it encounters to the {@code fileDescriptorSetsBuilder}.
     * All preexisting state in the proto builder is cleared.
     */
    public final void serialize(
        FileDescriptorSetsBuilder fileDescriptorSetsBuilder,
        {{node.parent_proto_container_type}}.Builder builder) {
      builder.clear();
      {{node.proto_field_type}}.Builder childBuilder = {{node.proto_field_type}}.newBuilder();
      serialize(fileDescriptorSetsBuilder, childBuilder);
      builder.set{{node.enum_name|upper_camel_case}}Node(childBuilder.build());
    }
  # if node.is_abstract
    {{ blank_line }}
    /**
     * Serializes this node into the appropriate field type proto builder
     * ({@link {{node.proto_field_type}}.Builder}) for its parent proto container type.
     * Adds any new file descriptor sets it encounters to the {@code fileDescriptorSetsBuilder}.
     * All preexisting state in the proto builder is cleared.
     */
    public abstract void serialize(
        FileDescriptorSetsBuilder fileDescriptorSetsBuilder,
        {{node.proto_field_type}}.Builder builder);
  # endif
    {{ blank_line }}
    /**
     * Serializes this node into the given {@link {{node.proto_type}}.Builder}.
     * Adds any new file descriptor sets it encounters to the builder.
     * All preexisting state in the proto builder is cleared.
     */
    public final void serialize(
        FileDescriptorSetsBuilder fileDescriptorSetsBuilder,
        {{node.proto_type}}.Builder proto) {
      proto.clear();
      // Serialize superclass state to the parent field of the proto.
      {{node.parent_proto_type}} parent =
          ({{node.parent_proto_type}}) super.serialize(fileDescriptorSetsBuilder);
      proto.setParent(parent);
  # for field in node.fields
    # if field.is_node_ptr
      // {{field.name|lower_camel_case}} is an AST node. Call its serialization chain.
      if (this.get{{field.name|upper_camel_case}}() != null) {
        {{field.proto_type}}.Builder {{field.name|lower_camel_case}}Builder =
            {{field.proto_type}}.newBuilder();
        this.get{{field.name|upper_camel_case}}().serialize(
            fileDescriptorSetsBuilder, {{field.name|lower_camel_case}}Builder);
        proto.set{{field.name|upper_camel_case}}(
            {{field.name|lower_camel_case}}Builder.build());
      }
    # elif field.is_node_vector
      // {{field.name|lower_camel_case}} is a collection of AST nodes. Serialize each of them.
      ImmutableList<{{field.java_type}}> {{field.name|lower_camel_case}}s =
          this.get{{field.name|upper_camel_case}}();
      for ({{field.java_type}} element : {{field.name|lower_camel_case}}s) {
        {{field.proto_type}}.Builder {{field.name|lower_camel_case}}Builder =
            {{field.proto_type}}.newBuilder();
        element.serialize(fileDescriptorSetsBuilder, {{field.name|lower_camel_case}}Builder);
        proto.add{{field.name|upper_camel_case}}({{field.name|lower_camel_case}}Builder.build());
      }
    # elif field.is_vector
      # if field.has_proto_setter
      // {{field.name|lower_camel_case}} is a collection of leaf types that can be set as a proto field directly.
      // (see scalar types in (broken link).py for more information.)
      proto.addAll{{field.name|upper_camel_case}}(this.get{{field.name|upper_camel_case}}());
      # else
      // {{field.name|lower_camel_case}} is a collection of leaf types that require a helper method to serialize.
      // (see scalar types in (broken link).py for more information.)
      ImmutableList<{{field.java_type}}> {{field.name|lower_camel_case}}s =
          this.get{{field.name|upper_camel_case}}();
      for ({{field.java_type}} element : {{field.name|lower_camel_case}}s) {
        proto.add{{field.name|upper_camel_case}}(ResolvedNodes.serialize(element, fileDescriptorSetsBuilder));
      }
      # endif
    # else
      # if field.has_proto_setter
      // {{field.name|lower_camel_case}} is a leaf type that can be set as a proto field directly.
      // (see scalar types in (broken link).py for more information.)
      proto.set{{field.name|upper_camel_case}}(this.get{{field.name|upper_camel_case}}());
      # else
      // {{field.name|lower_camel_case}} is a leaf type that requires a helper method to serialize.
      // (see scalar types in (broken link).py for more information.)
      if (this.get{{field.name|upper_camel_case}}() != null) {
        proto.set{{field.name|upper_camel_case}}(
            ResolvedNodes.serialize(this.get{{field.name|upper_camel_case}}(),
                fileDescriptorSetsBuilder));
      }
      # endif
    # endif
  # endfor
    }
  # for field in node.fields
    {{ blank_line }}
    # if field.javadoc
{{field.javadoc}}
    # endif
    public final {{field.full_java_type}} get{{field.name|upper_camel_case}}() {
      return {{field.name|lower_camel_case}};
    }
  # endfor
  # if not node.is_abstract
  {{ blank_line }}
    @Override
    public void accept(Visitor visitor) {
      visitor.visit(this);
    }
  # endif
  {{ blank_line }}
    @Override
    protected void acceptChildren(Visitor visitor) {
      super.acceptChildren(visitor);
    # for field in node.fields
      # if field.is_node_ptr or field.is_node_vector
      visitor.descend({{field.name|lower_camel_case}});
      # endif
    # endfor
    }
  {{ blank_line }}
  {{ blank_line }}
    protected void collectDebugStringFields(List<DebugStringField> fields) {
      super.collectDebugStringFields(fields);
  # if node.use_custom_debug_string
      DebugStrings.collectDebugStringFields(this, fields);
  # else
    # for field in node.fields
      # if field.is_node_ptr
      if ({{field.name|lower_camel_case}} != null) {
        fields.add(new DebugStringField("{{field.name}}", {{field.name|lower_camel_case}}));
      }
      # elif field.is_node_vector
      if (!{{field.name|lower_camel_case}}.isEmpty()) {
        fields.add(new DebugStringField("{{field.name}}", {{field.name|lower_camel_case}}));
      }
      # else
        # if field.is_not_ignorable
      {
        # else
      if (!DebugStrings.isDefaultValue({{field.name|lower_camel_case}})) {
        # endif
        fields.add(new DebugStringField("{{field.name}}", DebugStrings.{{field.java_to_string_method}}({{field.name|lower_camel_case}})));
      }
      # endif
    # endfor
  # endif
    }

  # if node.use_custom_debug_string
    protected String getNameForDebugString() {
      return DebugStrings.getNameForDebugString(this);
    }
  # endif
  }
# endfor
}
